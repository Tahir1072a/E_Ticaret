openapi: 3.0.0
info:
  title: E-Ticaret API
  version: 1.2.0
  description: Base Product, Admin User, Seller Application, Order, Cart, Auth ve Return Request uçları
servers:
  - url: http://localhost:3000

tags:
  - name: PublicProducts
    description: Herkese açık ürün kataloğu ve yorum işlemleri
  - name: Auth
    description: Kullanıcı kimlik doğrulama ve şifre işlemleri
  - name: Customers
    description: Müşteri profil, adres, sipariş, favori ve iade işlemleri
  - name: Wholesale (Base Products)
    description: Toptan ürün (Base Product) yönetimi (Admin ve Satıcılar için)
  - name: StoreProducts
    description: Satıcının kendi mağaza ürünlerini yönetme işlemleri
  - name: SellerApplications
    description: Kullanıcının satıcı başvurusu işlemleri
  - name: AdminUsers
    description: Admin için kullanıcı yönetim uçları
  - name: AdminSellerApplications
    description: Admin — Satıcı başvuruları yönetimi
  - name: AdminOrders
    description: Admin için sipariş ve iade yönetimi uçları
  - name: Orders
    description: Müşteri sipariş oluşturma ve ödeme işlemleri
  - name: Store
    description: Satıcının sipariş, mağaza ve iade yönetimi işlemleri
  - name: Cart
    description: Sepet işlemleri
  - name: Coupons
    description: İndirim kuponu işlemleri
  - name: Search
    description: Arama işlemleri

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PriceHistoryEntry:
      type: object
      properties:
        price:
          type: number
        date:
          type: string
          format: date-time
        user:
          type: string
          description: Fiyatı değiştiren kullanıcının ID'si
    BaseProduct:
      type: object
      properties:
        _id:
          type: string
          example: "66bc6e44a455a44a88a44a55"
        masterNumber:
          type: string
          example: "MAT-100245"
        masterName:
          type: string
          example: "Deri Spor Ayakkabı"
        masterPrice:
          type: number
          example: 1299.90
        masterStock:
          type: integer
          example: 10000
        masterPriceHistory:
          type: array
          items:
            $ref: '#/components/schemas/PriceHistoryEntry'
        masterDate:
          type: string
          format: date-time
          example: "2025-08-13T12:21:00.000Z"
        masterCategoryNumber:
          type: string
          example: "CAT-01"
        masterCategoryName:
          type: string
          example: "Ayakkabı"
        isActive:
          type: boolean
          default: true
        masterImage:
          type: string
          example: "/uploads/image-1678886400000.jpg"
    CreateBaseProductInput:
      type: object
      required:
        - masterNumber
        - masterName
        - masterPrice
        - masterCategoryNumber
        - masterCategoryName
      properties:
        masterNumber:
          type: string
          example: "MAT-100245"
        masterName:
          type: string
          example: "Deri Spor Ayakkabı"
        masterPrice:
          type: number
          example: 1299.90
        masterStock:
          type: integer
          example: 10000
        masterDate:
          type: string
          format: date-time
          example: "2025-08-13T12:21:00.000Z"
        masterCategoryNumber:
          type: string
          example: "CAT-01"
        masterCategoryName:
          type: string
          example: "Ayakkabı"
    UpdateBaseProductInput:
      type: object
      properties:
        masterName:
          type: string
        masterPrice:
          type: number
        masterCategoryName:
          type: string
        masterCategoryNumber:
          type: string
        masterStock:
          type: integer
    PublicProductResponse:
      type: object
      properties:
        _id:
          type: string
          example: "66bc5e44a455a44a88a44a44"
        price:
          type: number
          example: 1499.99
        stock:
          type: integer
          example: 50
        description:
          type: string
          example: "Yüksek kaliteli, rahat spor ayakkabı."
        baseProduct:
          type: object
          properties:
            masterName:
              type: string
              example: "Deri Spor Ayakkabı"
            masterCategory:
              type: string
              example: "Ayakkabı"
        seller:
          type: object
          properties:
            storeName:
              type: string
              example: "AkssStore"
    SellerInfo:
      type: object
      properties:
        name:
          type: string
          example: "Jane Doe"
        storeName:
          type: string
          example: "Doe Shoes"
    User:
      type: object
      properties:
        _id:
          type: string
          example: 66bb1c2de6b0d3b5b2d7f111
        name:
          type: string
          example: Ahmet
        surname:
          type: string
          example: Yılmaz
        username:
          type: string
          example: ahmety
        email:
          type: string
          example: ahmet@example.com
        phoneNumber:
          type: string
          example: "+905551234567"
        age:
          type: integer
          example: 28
        role:
          type: string
          enum: [Admin, Seller, Customer, Applicant]
          example: Customer
        isActive:
          type: boolean
          default: true
        shippingAddresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        wishlist:
          type: array
          items:
            type: string
            description: "StoreProduct ObjectId"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SellerUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            storeName:
              type: string
              example: "Doe Shoes"
            sellerId:
              type: string
              example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
    CreateUserInput:
      type: object
      required: [email, username, password, name, surname]
      properties:
        name:
          type: string
          example: Ahmet
        surname:
          type: string
          example: Yılmaz
        username:
          type: string
          example: ahmety
        email:
          type: string
          example: ahmet@example.com
        password:
          type: string
          example: StrongP@ssw0rd
        role:
          type: string
          enum: [Admin, Seller, Customer, Applicant]
          example: Customer
    UpdateUserInput:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [Admin, Seller, Customer, Applicant]
    UpdateCustomerInput:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        username:
          type: string
        email:
          type: string
    UserAddressesResponse:
      type: object
      properties:
        shippingAddresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    SellerApplication:
      type: object
      properties:
        _id:
          type: string
          example: 66ba0f69e6b0d3b5b2d7f111
        user:
          type: string
          example: 66b9f4b6e6b0d3b5b2d7f000
        storeName:
          type: string
          example: "AkssStore"
        shippingAddress:
          type: object
          required: [address, city, country]
          properties:
            address:
              type: string
            city:
              type: string
            country:
              type: string
        status:
          type: string
          enum: [pending, approved, rejected]
          example: pending
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PopulatedSellerApplication:
      type: object
      properties:
        _id:
          type: string
          example: 66ba0f69e6b0d3b5b2d7f111
        user:
          type: object
          properties:
            _id:
              type: string
              example: 66b9f4b6e6b0d3b5b2d7f000
            name:
              type: string
              example: "Ahmet"
            email:
              type: string
              example: "ahmet@example.com"
            username:
              type: string
              example: "ahmety"
        storeName:
          type: string
          example: "AkssStore"
        status:
          type: string
          enum: [pending, approved, rejected]
          example: pending
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateApplicationInput:
      type: object
      required: [storeName]
      properties:
        storeName:
          type: string
          example: "Yeni Mağazam"
        shippingAddress:
          type: object
          required: [address, city, country]
          properties:
            address:
              type: string
            city:
              type: string
            country:
              type: string
    UpdateApplicationStatusInput:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [approved, rejected]
          example: approved
    StoreProductResponse:
      type: object
      properties:
        _id:
          type: string
          example: "66bc5e44a455a44a88a44a44"
        baseProduct:
          type: string
          example: "66b9f4b6e6b0d3b5b2d7f111"
        seller:
          type: string
          example: "66b9f4b6e6b0d3b5b2d7f000"
        currentPrice:
          type: number
          example: 1499.99
        priceHistory:
          type: array
          items:
            $ref: '#/components/schemas/PriceHistoryEntry'
        stock:
          type: integer
          example: 50
        description:
          type: string
          example: "Yüksek kaliteli, rahat spor ayakkabı."
        isActive:
          type: boolean
          example: true
        onSale:
          type: boolean
        salePrice:
          type: number
        rating:
          type: number
        numReviews:
          type: integer
        imgUrl:
          type: string
          example: "http://example.com/images/shoe.jpg"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateStoreProductInput:
      type: object
      required: [baseProductId, currentPrice, stock, description]
      properties:
        baseProductId:
          type: string
          description: Toptan ürün listesindeki ürünün ID'si
          example: "66b9f4b6e6b0d3b5b2d7f111"
        currentPrice:
          type: number
          description: Satıcının belirlediği satış fiyatı
          example: 1499.99
        stock:
          type: integer
          description: Mağazadaki stok adedi
          example: 50
        description:
          type: string
          description: Ürün için satıcının açıklaması
          example: "Yüksek kaliteli, rahat spor ayakkabı."
        imgUrl:
          type: string
          description: Ürün görseli URL'i
    UpdateStoreProductInput:
      type: object
      properties:
        currentPrice:
          type: number
          description: Yeni satış fiyatı
          example: 1549.99
        description:
          type: string
          description: Yeni ürün açıklaması
          example: "Su geçirmez, yeni sezon spor ayakkabı."
        isActive:
          type: boolean
          description: Ürünün mağazada aktif olup olmadığı
          example: false
        imgUrl:
          type: string
    UpdateStockInput:
      type: object
      required: [quantity]
      properties:
        quantity:
          type: integer
          description: Stoğa eklenecek veya çıkarılacak miktar (negatif değer stoktan düşer)
          example: -5
    Address:
      type: object
      properties:
        name:
          type: string
          example: "Evim"
        address:
          type: string
          example: "Cumhuriyet Mah. No:10 Daire:5"
        city:
          type: string
          example: "İstanbul"
        country:
          type: string
          example: "Turkey"
        addressType:
          type: string
          enum: ["Ev Adresi", "İş Adresi", "Diğer"]
          default: "Ev Adresi"
    ShippingAddress:
      type: object
      properties:
        fullName:
          type: string
          example: Ahmet Yılmaz
        phone:
          type: string
          example: "+90 555 555 55 55"
        address:
          type: string
          example: "Cumhuriyet Mah. No:10 Daire:5"
        city:
          type: string
          example: "İstanbul"
        district:
          type: string
          example: "Kadıköy"
        postalCode:
          type: string
          example: "34710"
    Order:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        seller:
          type: string
        orderItems:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
        shippingAddress:
          $ref: "#/components/schemas/ShippingAddress"
        paymentMethod:
          type: string
          example: CreditCard
        totalPrice:
          type: number
        isPaid:
          type: boolean
          default: false
        paidAt:
          type: string
          format: date-time
        isDelivered:
          type: boolean
          default: false
        deliveredAt:
          type: string
          format: date-time
        isCanceled:
          type: boolean
          default: false
        appliedCoupon:
          type: string
        status:
          type: string
          example: Pending
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PopulatedOrderUser:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
    PopulatedOrder:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/PopulatedOrderUser'
        seller:
          $ref: '#/components/schemas/PopulatedOrderUser'
        orderItems:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
        shippingAddress:
          $ref: "#/components/schemas/ShippingAddress"
        paymentMethod:
          type: string
        totalPrice:
          type: number
        isPaid:
          type: boolean
        paidAt:
          type: string
          format: date-time
        isDelivered:
          type: boolean
        deliveredAt:
          type: string
          format: date-time
        isCanceled:
          type: boolean
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CartItem:
      type: object
      properties:
        product:
          type: string
          description: Product ObjectId
          example: 66b9f4b6e6b0d3b5b2d7f111
        quantity:
          type: integer
          example: 2
        price:
          type: number
          example: 199.9
    Cart:
      type: object
      properties:
        user:
          type: string
          example: 66b9f4b6e6b0d3b5b2d7f000
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
        subTotal:
          type: number
          default: 0
        total:
          type: number
          default: 0
        appliedCoupon:
          type: string
    PopulatedCartItem:
      type: object
      properties:
        quantity:
          type: integer
          example: 2
        price:
          type: number
          example: 199.9
        product:
          type: object
          properties:
            stock:
              type: integer
              example: 42
            description:
              type: string
              example: "Yüksek kaliteli, rahat spor ayakkabı."
            baseProduct:
              type: object
              properties:
                masterName:
                  type: string
                  example: "Deri Spor Ayakkabı"
                masterImage:
                  type: string
                  example: "/uploads/image-123.jpg"
            seller:
              type: object
              properties:
                name:
                  type: string
                  example: "Ahmet"
                storeName:
                  type: string
                  example: "AkssStore"
    PopulatedCart:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/PopulatedCartItem"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        subTotal:
          type: number
        total:
          type: number
        appliedCoupon:
          type: string
    RemoveFromCartResponse:
      type: object
      properties:
        message:
          type: string
          example: "Ürün sepetten kaldırıldı"
        removedCart:
          $ref: '#/components/schemas/Cart'
    RegisterUserInput:
      type: object
      required: [email, username, password, name, surname]
      properties:
        email:
          type: string
          example: user@example.com
        username:
          type: string
          example: myusername
        password:
          type: string
          example: MyStrongPassword123
        name:
          type: string
          example: "Ahmet"
        surname:
          type: string
          example: "Yılmaz"
    LoginUserInput:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: MyStrongPassword123
    AuthResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI...
    LoginSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Giriş başarılı!"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI..."
        role:
          type: string
          example: "Customer"
    SellerShippingAddress:
      type: object
      properties:
        address:
          type: string
          example: "İstiklal Cad. No:10"
        city:
          type: string
          example: "İstanbul"
        country:
          type: string
          example: "Turkey"
    SellerRegisterInput:
      type: object
      properties:
        email:
          type: string
          example: "jane.doe@example.com"
        username:
          type: string
          example: "janedoe"
        password:
          type: string
          example: "Guclu!123"
        name:
          type: string
          example: "Jane"
        surname:
          type: string
          example: "Doe"
        phoneNumber:
          type: string
          example: "+90 555 111 22 33"
        age:
          type: integer
          example: 27
        storeName:
          type: string
          example: "Doe Shoes"
        shippingAddress:
          $ref: "#/components/schemas/SellerShippingAddress"
    CouponInput:
      type: object
      required: [code, description, discountType, expiryDate, discountValue, type]
      properties:
        code:
          type: string
          example: "SUMMER25"
        description:
          type: string
          example: "Yaz indirimi"
        discountType:
          type: string
          enum: [percentage, fixedAmount]
          example: "percentage"
        discountValue:
          type: number
          example: 25
        minPurchaseAmount:
          type: number
          example: 100
        expiryDate:
          type: string
          format: date-time
          example: "2025-09-22T23:59:59.000Z"
        usageLimit:
          type: integer
          example: 100
        type:
          type: string
          enum: [Master, Specific, Category]
          example: "Master"
        targetUsers:
          type: array
          items:
            type: string
          description: "Eğer kupon tipi 'Specific' ise, hedeflenen kullanıcı ID'leri."
        targetCategories:
          type: array
          items:
            type: string
          description: "Eğer kupon tipi 'Category' ise, hedeflenen kategori adları."
          example: ["Ayakkabı", "T-shirt"]
    CouponResponse:
      type: object
      properties:
        _id:
          type: string
        code:
          type: string
        description:
          type: string
        discountType:
          type: string
        discountValue:
          type: number
        minPurchaseAmount:
          type: number
        expiryDate:
          type: string
          format: date-time
        usageLimit:
          type: integer
        timesUsed:
          type: integer
        isActive:
          type: boolean
        type:
          type: string
          enum: [Master, Specific, Category]
        createdBy:
          type: string
        targetUsers:
          type: array
          items:
            type: string
        targetCategories:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ApplyCouponInput:
      type: object
      required: [couponCode]
      properties:
        couponCode:
          type: string
          example: "SUMMER25"
    SaleInput:
      type: object
      required: [discountPercentage]
      properties:
        discountPercentage:
          type: number
          example: 20
    Review:
      type: object
      properties:
        _id:
          type: string
        comment:
          type: string
        rating:
          type: number
        user:
          type: string
        product:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateReviewInput:
      type: object
      required: [rating, comment]
      properties:
        rating:
          type: number
          example: 5
        comment:
          type: string
          example: "Bu ürün harika!"
    PopulatedReview:
      type: object
      properties:
        _id:
          type: string
        comment:
          type: string
        rating:
          type: number
        user:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            surname:
              type: string
        product:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ChangePasswordInput:
      type: object
      required: [oldPassword, newPassword]
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    ForgotPasswordInput:
      type: object
      required: [email]
      properties:
        email:
          type: string
    ResetPasswordInput:
      type: object
      required: [password]
      properties:
        password:
          type: string
    ReturnRequest:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
          description: "İade talebini oluşturan kullanıcı ID'si"
        order:
          type: string
          description: "İlgili siparişin ID'si"
        seller:
          type: string
          description: "İade edilen ürünün satıcısının ID'si"
        product:
          type: string
          description: "İade edilen ürünün ID'si"
        reason:
          type: string
          enum: [WRONG_SIZE, DAMAGED_PRODUCT, NOT_AS_DESCRIBED, CHANGED_MIND, DEFECTIVE, OTHER]
        customerComments:
          type: string
        status:
          type: string
          enum: [PENDING_APPROVAL, APPROVED, REJECTED]
          default: PENDING_APPROVAL
        sellerComments:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateReturnRequestInput:
      type: object
      required: [orderId, productId, reason]
      properties:
        orderId:
          type: string
        productId:
          type: string
        reason:
          type: string
          enum: [WRONG_SIZE, DAMAGED_PRODUCT, NOT_AS_DESCRIBED, CHANGED_MIND, DEFECTIVE, OTHER]
        customerComments:
          type: string
    UpdateReturnRequestInput:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [APPROVED, REJECTED]
        sellerComments:
          type: string

paths:
  /api/products:
    get:
      summary: Herkese açık tüm ürünleri listeler
      tags: [PublicProducts]
      parameters:
        - name: sort
          in: query
          description: Sıralama kriteri (örn: -price, name)
          schema:
            type: string
        - name: page
          in: query
          description: Sayfa numarası
          schema:
            type: integer
        - name: limit
          in: query
          description: Sayfa başına ürün sayısı
          schema:
            type: integer
      responses:
        '200':
          description: Ürünlerin listesi
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                    example: 25
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/PublicProductResponse'
        '500':
          description: Sunucu hatası
  /api/products/{id}:
    get:
      summary: ID'ye göre herkese açık bir ürün getirir
      tags: [PublicProducts]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: İstenen ürün
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProductResponse'
        '404':
          description: Ürün bulunamadı
        '500':
          description: Sunucu hatası
  /api/products/category/{category}:
    get:
      summary: Kategoriye göre herkese açık ürünleri listeler
      tags: [PublicProducts]
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
            example: Ayakkabı
      responses:
        '200':
          description: İlgili kategorideki ürünler
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicProductResponse'
        '404':
          description: Bu kategoriye ait ürün bulunamadı
        '500':
          description: Sunucu hatası
  /api/products/store-name/{storeName}:
    get:
      summary: Mağaza adına göre herkese açık ürünleri listeler
      tags: [PublicProducts]
      parameters:
        - name: storeName
          in: path
          required: true
          schema:
            type: string
            example: "Doe Shoes"
      responses:
        '200':
          description: İlgili mağazadaki ürünler
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicProductResponse'
        '404':
          description: Bu isimde bir mağaza bulunamadı
        '500':
          description: Sunucu hatası
  /api/products/{productId}/reviews:
    get:
      summary: Bir ürüne ait tüm yorumları listeler
      tags: [PublicProducts]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Yorumların listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopulatedReview'
        '500':
          description: Sunucu hatası
  /api/register:
    post:
      summary: Yeni müşteri kaydı oluşturur
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserInput'
      responses:
        '201':
          description: Kullanıcı başarıyla kaydedildi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bu e-posta veya kullanıcı adı zaten mevcut.
        '500':
          description: Sunucu hatası
  /api/login:
    post:
      summary: Kullanıcı girişi yapar
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserInput'
      responses:
        '200':
          description: Giriş başarılı
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '400':
          description: Hatalı şifre.
        '404':
          description: Kullanıcı bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/seller-register:
    post:
      summary: Satıcı olarak kaydolur ve başvuru oluşturur
      description: |
        Yeni bir kullanıcıyı "Applicant" rolüyle oluşturur ve aynı anda bu kullanıcı için bir satıcı başvurusu (`SellerApplication`) yaratır. İki işlem de tek bir transaction içinde gerçekleşir.
        - E-posta veya kullanıcı adı mevcutsa **400** döner.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellerRegisterInput'
            examples:
              ornek:
                summary: Geçerli istek gövdesi
                value:
                  email: "jane.doe@example.com"
                  username: "janedoe"
                  password: "Guclu!123"
                  name: "Jane"
                  surname: "Doe"
                  phoneNumber: "+90 555 111 22 33"
                  age: 27
                  storeName: "Doe Shoes"
                  shippingAddress:
                    address: "İstiklal Cad. No:10"
                    city: "İstanbul"
                    country: "Turkey"
      responses:
        '201':
          description: Başvuru başarıyla işleme alındı.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                basarili:
                  value:
                    message: "Seller başvurunuz işleme alınmıştır. Gerekli bilgilendirme en kısa sürede yapılacaktır"
        '400':
          description: Bu kullanıcı zaten sisteme kayıtlıdır.
        '500':
          description: Sunucu hatası
  /api/change-password:
    patch:
      summary: Kullanıcının şifresini değiştirir
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordInput'
      responses:
        '200':
          description: Şifre başarıyla değiştirildi.
        '400':
          description: Eski şifre hatalı veya yeni şifre geçersiz.
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
  /api/forgot-password:
    post:
      summary: Şifre sıfırlama talebi gönderir
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordInput'
      responses:
        '200':
          description: Talep işleme alındı.
        '500':
          description: Sunucu hatası.
  /api/reset-password/{token}:
    patch:
      summary: Şifreyi sıfırlama anahtarı ile günceller
      tags: [Auth]
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordInput'
      responses:
        '200':
          description: Şifre başarıyla güncellendi.
        '400':
          description: Geçersiz veya süresi dolmuş anahtar.
        '500':
          description: Sunucu hatası.
  /api/customers:
    delete:
      summary: Müşteri Hesabını Sil (Pasif Yap)
      description: "Giriş yapmış kullanıcının kendi hesabını pasif hale getirmesini sağlar (`isActive: false`)."
      tags: [Customers]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Kullanıcı hesabı başarıyla silindi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
  /api/customers/sellers:
    get:
      summary: Tüm satıcıları listeler
      description: "Sistemdeki tüm satıcıların adını ve mağaza adını listeler. Kimlik doğrulaması gerektirir."
      tags: [Customers]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Satıcı listesi başarıyla alındı.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SellerInfo'
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
  /api/customers/addresses:
    get:
      summary: Müşterinin Kayıtlı Adreslerini Getir
      description: "Giriş yapmış kullanıcının profilindeki tüm kayıtlı kargo adreslerini listeler."
      tags: [Customers]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Adres listesi başarıyla alındı.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '401':
          description: Yetkisiz.
        '404':
          description: Kayıtlı adres bulunamadı.
        '500':
          description: Sunucu hatası.
    post:
      summary: Müşterinin profiline yeni bir kargo adresi ekler
      tags: [Customers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [shippingAddress]
              properties:
                shippingAddress:
                  $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Adres başarıyla eklendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Adres bilgisi gönderilmedi.
        '401':
          description: Yetkisiz.
        '404':
          description: Kullanıcı bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/customers/addresses/one/{id}:
    delete:
      summary: Müşterinin belirli bir kargo adresini siler
      tags: [Customers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Silinecek adresin ID'si
          schema:
            type: string
      responses:
        '200':
          description: Adres başarıyla silindi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Address'
        '401':
          description: Yetkisiz.
        '404':
          description: Kullanıcı veya adres bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/customers/addresses/multiple/{ids}:
    delete:
      summary: Müşterinin birden fazla kargo adresini siler
      tags: [Customers]
      security:
        - bearerAuth: []
      parameters:
        - name: ids
          in: path
          required: true
          description: Silinecek adreslerin virgülle ayrılmış ID'leri
          schema:
            type: string
      responses:
        '200':
          description: Adresler başarıyla silindi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Yetkisiz.
        '404':
          description: Kullanıcı bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/customers/addresses/update/{id}:
    put:
      summary: Müşterinin belirli bir kargo adresini günceller
      tags: [Customers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Güncellenecek adresin ID'si
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Adres başarıyla güncellendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Kullanıcı veya belirtilen adres bulunamadı.
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
  /api/customers/update:
    put:
      summary: Müşteri Bilgilerini Güncelle
      description: "Giriş yapmış kullanıcının kendi profil bilgilerini (ad, e-posta vb.) güncellemesini sağlar."
      tags: [Customers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerInput'
      responses:
        '200':
          description: Müşteri bilgileri başarıyla güncellendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Yetkisiz.
        '404':
          description: Kullanıcı bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/customers/orders:
    get:
      summary: Müşterinin Siparişlerini Listele
      description: "Giriş yapmış kullanıcının tüm siparişlerini listeler."
      tags: [Customers]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sipariş listesi başarıyla alındı.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopulatedOrder'
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
  /api/customers/orders/id/{id}:
    get:
      summary: Müşterinin Belirli Bir Siparişini Getir
      description: "Giriş yapmış kullanıcının, ID'si belirtilen siparişinin detaylarını getirir."
      tags: [Customers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sipariş detayı başarıyla alındı.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PopulatedOrder'
        '401':
          description: Yetkisiz.
        '404':
          description: Sipariş bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/customers/orders/return-request:
    post:
      summary: Sipariş için iade talebi oluşturur
      description: "Teslimatı tamamlanmış bir siparişin belirli ürünleri için iade talebi oluşturur. Yasal iade süresi 15 gündür."
      tags: [Customers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReturnRequestInput'
      responses:
        '201':
          description: İade talebi başarıyla oluşturuldu.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/ReturnRequest'
        '400':
          description: Geçersiz istek (örn: sipariş teslim edilmemiş, iade süresi dolmuş).
        '401':
          description: Yetkisiz.
        '404':
          description: Sipariş veya ürün bulunamadı.
        '500':
          description: Sunucu hatası.
    get:
      summary: Müşterinin iade taleplerini listeler
      description: "Giriş yapmış kullanıcının tüm iade taleplerini listeler."
      tags: [Customers]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: İade talepleri listesi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReturnRequest'
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
  /api/customers/open-package:
    post:
      summary: Müşterinin paket açma işlemi (Hediye Kupon Kazanma)
      description: "Bu uç nokta, müşterinin bir paketi açtığını simüle ederek rastgele bir hediye kuponu kazanmasını sağlar."
      tags: [Customers]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Kupon başarıyla oluşturuldu ve kullanıcıya atandı.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/CouponResponse'
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
  /api/customers/wishlist:
    get:
      summary: Müşterinin favori ürün listesini getirir
      tags: [Customers]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Favori ürün listesi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoreProductResponse'
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
    post:
      summary: Favori listesine ürün ekler
      tags: [Customers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productId]
              properties:
                productId:
                  type: string
      responses:
        '200':
          description: Ürün favorilere eklendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: string
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
  /api/customers/wishlist/{productId}:
    delete:
      summary: Favori listesinden ürün kaldırır
      tags: [Customers]
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ürün favorilerden kaldırıldı.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: string
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
  /api/customers/{productId}/reviews:
    post:
      summary: Bir ürüne yeni bir yorum ekler
      description: "Kullanıcının satın aldığı bir ürüne yorum yapmasını sağlar. Daha önce yorum yapılmışsa veya ürün satın alınmamışsa hata döner."
      tags: [Customers]
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewInput'
      responses:
        '201':
          description: Yorum başarıyla eklendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Review'
        '400':
          description: Bu ürünü zaten yorumladınız.
        '401':
          description: Yetkisiz.
        '403':
          description: Sadece satın aldığınız ürünlere yorum yapabilirsiniz.
        '404':
          description: Yorum yapılacak ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/customers/coupons:
    get:
      summary: Müşterinin kuponlarını listeler
      description: "Giriş yapmış kullanıcının sahip olduğu (kişiye özel) ve sistemdeki tüm genel kuponları listeler."
      tags: [Customers]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Kuponlar başarıyla getirildi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CouponResponse'
        '401':
          description: Yetkisiz.
        '404':
          description: Size atanmış bir kupon bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/coupons:
    post:
      summary: Yeni bir indirim kuponu oluşturur (Admin)
      description: "Sadece **Admin** rolüne sahip kullanıcılar yeni kupon oluşturabilir."
      tags: [Coupons]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponInput'
      responses:
        '201':
          description: Kupon başarıyla oluşturuldu.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/CouponResponse'
        '400':
          description: "Geçersiz istek (örn: kupon kodu zaten mevcut, son kullanma tarihi geçmiş, geçersiz kategori)."
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
    get:
      summary: Tüm kuponları listeler (Admin)
      description: "Sistemdeki tüm aktif kuponları listeler. Sadece **Admin** rolü erişebilir."
      tags: [Coupons]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Kupon listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CouponResponse'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
  /api/coupons/apply-coupon:
    post:
      summary: Sepete indirim kuponu uygular
      description: "Bir kullanıcının sepetine kupon uygular. Kategori bazlı kuponları destekler."
      tags: [Coupons]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyCouponInput'
      responses:
        '200':
          description: Kupon başarıyla uygulandı.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PopulatedCart'
        '400':
          description: "Geçersiz veya süresi dolmuş kupon veya minimum sepet tutarı karşılanmıyor."
        '401':
          description: Yetkisiz.
        '403':
          description: Bu kupon size özel değil.
        '404':
          description: Sepet veya kupon bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/coupons/type/{type}:
    get:
      summary: Türe göre kuponları listeler (Admin)
      description: "Belirtilen türe göre (`Master`, `Specific`, `Category`) kuponları listeler. Sadece **Admin** rolü erişebilir."
      tags: [Coupons]
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [Master, Specific, Category]
      responses:
        '200':
          description: İlgili türdeki kuponların listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CouponResponse'
        '400':
          description: Geçersiz kupon türü.
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
  /api/coupons/code/{code}:
    get:
      summary: Koda göre kupon getirir (Admin)
      description: "Belirtilen kupon koduna sahip kuponu getirir. Sadece **Admin** rolü erişebilir."
      tags: [Coupons]
      security:
        - bearerAuth: []
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: İstenen kupon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponResponse'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Kupon bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/coupons/cart/{id}:
    delete:
      summary: Sepetten uygulanan kuponu kaldırır
      description: "Kullanıcının, ID'si belirtilen sepetindeki `appliedCoupon` alanını temizleyerek kuponu kaldırır."
      tags: [Coupons]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "Sepet ID'si (Cart ObjectId)"
      responses:
        '200':
          description: Kupon başarıyla sepetten kaldırıldı.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Başarıyla kupon kaldırılmıştır"
                  data:
                    $ref: '#/components/schemas/PopulatedCart'
        '400':
          description: Geçersiz istek (örn: Cart ID belirtilmedi).
        '401':
          description: Yetkisiz.
        '404':
          description: Sepet bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/coupons/{id}:
    put:
      summary: Kuponun indirim değerini günceller (Admin)
      description: "ID'si belirtilen kuponun indirim değerini günceller. Sadece **Admin** rolü erişebilir."
      tags: [Coupons]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [discountValue]
              properties:
                discountValue:
                  type: number
                  example: 30
      responses:
        '200':
          description: Kupon başarıyla güncellendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/CouponResponse'
        '400':
          description: Geçersiz indirim değeri.
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Kupon bulunamadı.
        '500':
          description: Sunucu hatası.
    delete:
      summary: Kuponu pasif hale getirir (Admin)
      description: "ID'si belirtilen kuponu `isActive: false` yaparak pasif hale getirir. Sadece **Admin** rolü erişebilir."
      tags: [Coupons]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Kupon başarıyla pasif hale getirildi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/CouponResponse'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Kupon bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/search/base-products:
    get:
      summary: Toptan ürünlerde arama yapar
      description: "Verilen bir arama terimi (`q`) ile toptan ürünlerin (`BaseProduct`) adında ve kategori adında arama yapar."
      tags: [Search]
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Arama sonuçları.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseProduct'
        '400':
          description: Arama terimi girilmedi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lütfen bir arama terimi giriniz."
        '500':
          description: Sunucu hatası.
  /api/search/store-products:
    get:
      summary: Mağaza ürünlerinde arama yapar
      description: "Verilen bir arama terimi (`q`) ile mağaza ürünlerinin (`StoreProduct`) açıklamasında, ana ürün adında, kategori adında veya satıcı adında arama yapar."
      tags: [Search]
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Arama sonuçları.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicProductResponse'
        '400':
          description: Arama terimi girilmedi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lütfen bir arama terimi giriniz."
        '500':
          description: Sunucu hatası.
  /api/search/users:
    get:
      summary: Kullanıcılarda arama yapar (Admin)
      description: "Verilen bir arama terimi (`q`) ile kullanıcıların ad, soyad, e-posta veya kullanıcı adında arama yapar. Sadece **Admin** rolü erişebilir."
      tags: [Search]
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: role
          in: query
          required: false
          description: "Kullanıcı rolüne göre filtrele (örn: Seller, Customer)"
          schema:
            type: string
            enum: [Admin, Seller, Customer, Applicant]
      responses:
        '200':
          description: Arama sonuçları.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
  /api/wholesale:
    post:
      summary: Yeni bir toptan ürün (base product) oluşturur
      description: Sadece **Admin** rolüne sahip kullanıcılar yeni bir ana ürün oluşturabilir.
      tags:
        - Wholesale (Base Products)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBaseProductInput'
      responses:
        "201":
          description: Base product başarıyla oluşturuldu.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/BaseProduct'
        "401":
          description: Yetkisiz.
        "403":
          description: Bu işlem için yetki yok (Rol).
        "500":
          description: Sunucu hatası
    get:
      summary: Tüm aktif toptan ürünleri (base product) listeler
      description: "Sistemdeki tüm aktif (`isActive: true`) toptan ürünleri listeler. **Seller** ve **Admin** rollerine sahip kullanıcılar erişebilir."
      tags:
        - Wholesale (Base Products)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Base product listesi başarıyla alındı.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseProduct'
        "401":
          description: Yetkisiz.
        "403":
          description: Bu işlem için yetki yok (Rol).
        "404":
          description: Ürün bulunamadı.
  /api/wholesale/import:
    get:
      summary: Harici API'den toptan ürünleri içe aktarır
      description: "Harici bir SAP API'sinden ürün verilerini çeker ve mevcut değilse veritabanına yeni `BaseProduct` olarak ekler. Kimlik doğrulaması gerektirir."
      tags: [Wholesale (Base Products)]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: İçe aktarma işlemi tamamlandı.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "İçe aktarma işlemi tamamlandı"
                  newProducts:
                    type: integer
                    example: 50
                  existingProduct:
                    type: integer
                    example: 120
        '401':
          description: Yetkisiz.
        '404':
          description: Harici kaynaktan ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/wholesale/{id}:
    get:
      summary: ID'ye göre bir toptan ürün (base product) getirir
      description: "**Seller** ve **Admin** rollerine sahip kullanıcılar erişebilir."
      tags: [Wholesale (Base Products)]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: İstenen base product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProduct'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (Rol).
        '404':
          description: Ürün bulunamadı.
        '500':
          description: Sunucu hatası.
    put:
      summary: ID'ye göre bir toptan ürün (base product) günceller
      description: "Sadece **Admin** rolü güncelleyebilir. Fiyat güncellenirse, eski fiyat `masterPriceHistory` dizisine eklenir."
      tags: [Wholesale (Base Products)]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBaseProductInput'
      responses:
        '200':
          description: Ürün başarıyla güncellendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/BaseProduct'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (Rol).
        '404':
          description: Ürün bulunamadı.
        '500':
          description: Sunucu hatası.
    delete:
      summary: ID'ye göre bir toptan ürünü SİLER (Hard Delete)
      description: "Sadece **Admin** rolü silebilir. Bu işlem ürünü veritabanından kalıcı olarak SİLER. `isActive` alanını `false` yapmaz."
      tags: [Wholesale (Base Products)]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ürün başarıyla silindi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ürün başarıyla silinmiştir. ID: 66bb1c2de6b0d3b5b2d7f111"
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (Rol).
        '404':
          description: Ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/wholesale/{id}/image:
    put:
      summary: Toptan ürün (base product) için resim yükler
      description: "Belirtilen ID'ye sahip base product için bir resim yükler. Sadece **Admin** rolü erişebilir."
      tags: [Wholesale (Base Products)]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                productImage:
                  type: string
                  format: binary
                  description: Yüklenecek ürün resmi.
      responses:
        '200':
          description: Ürün resmi başarıyla güncellendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/BaseProduct'
        '400':
          description: Lütfen bir resim dosyası seçin.
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (Rol).
        '404':
          description: Ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/wholesale/name/{name}:
    get:
      summary: Ada göre bir toptan ürün (base product) getirir
      description: "**Seller** ve **Admin** rollerine sahip kullanıcılar erişebilir."
      tags: [Wholesale (Base Products)]
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: İstenen base product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProduct'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (Rol).
        '404':
          description: Ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/store-products:
    post:
      summary: Mağazaya yeni ürün ekle
      description: "Giriş yapmış satıcının, toptan ürünler listesinden seçtiği bir ürünü kendi mağazasına eklemesini sağlar. Bu işlem bir transaction içinde gerçekleşir ve ana ürünün stoğundan düşülür. Sadece **Seller** rolü gerektirir."
      tags: [StoreProducts]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStoreProductInput'
      responses:
        '201':
          description: Ürün mağazaya başarıyla eklendi.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreProductResponse'
        '400':
          description: Geçersiz istek (Örn: Ürün mağazada zaten mevcut, stok 1000'den fazla, yetersiz ana stok).
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Ana ürün (BaseProduct) bulunamadı.
        '500':
          description: Sunucu hatası.
    get:
      summary: Mağazadaki tüm ürünleri listele
      description: "Giriş yapmış satıcının kendi mağazasındaki tüm aktif (`isActive: true`) ürünleri listeler. Sadece **Seller** rolü gerektirir."
      tags: [StoreProducts]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Mağaza ürünleri listesi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoreProductResponse'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Hiçbir ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/store-products/{id}:
    get:
      summary: Mağazadaki bir ürünü ID ile getir
      description: "Giriş yapmış satıcının, ID'si belirtilen aktif (`isActive: true`) ürünü kendi mağazasından getirmesini sağlar. Sadece **Seller** rolü gerektirir."
      tags: [StoreProducts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Mağaza ürününün ID'si
          schema:
            type: string
      responses:
        '200':
          description: İstenen mağaza ürünü.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreProductResponse'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Ürün bulunamadı veya satıcıya ait değil.
        '500':
          description: Sunucu hatası.
    put:
      summary: Mağazadaki bir ürünü güncelle
      description: "Giriş yapmış satıcının, ID'si belirtilen ürünü kendi mağazasında güncellemesini sağlar. Sadece **Seller** rolü gerektirir."
      tags: [StoreProducts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Güncellenecek mağaza ürününün ID'si
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStoreProductInput'
      responses:
        '200':
          description: Ürün başarıyla güncellendi.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreProductResponse'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Ürün bulunamadı veya satıcıya ait değil.
        '500':
          description: Sunucu hatası.
    delete:
      summary: Mağazadaki bir ürünü sil (pasif yap)
      description: "Giriş yapmış satıcının, ID'si belirtilen ürünü kendi mağazasından silmesini (isActive: false) sağlar. Sadece **Seller** rolü gerektirir."
      tags: [StoreProducts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Silinecek mağaza ürününün ID'si
          schema:
            type: string
      responses:
        '200':
          description: Ürün başarıyla silindi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Deri Spor Ayakkabı ürünü başarıyla silinmiştir."
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Ürün bulunamadı veya satıcıya ait değil.
        '500':
          description: Sunucu hatası.
  /api/store-products/stock/{id}:
    patch:
      summary: Mağazadaki bir ürünün stoğunu güncelle
      description: "Giriş yapmış satıcının, ID'si belirtilen ürünün sadece stok bilgisini güncellemesini sağlar. Sadece **Seller** rolü gerektirir."
      tags: [StoreProducts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Stoğu güncellenecek mağaza ürününün ID'si
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStockInput'
      responses:
        '200':
          description: Ürün stoğu başarıyla güncellendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Stok başarıyla güncellendi. Yeni stock: 45"
        '400':
          description: Geçersiz istek (örn: stok eksiye düşürülemez).
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Ürün bulunamadı veya satıcıya ait değil.
        '500':
          description: Sunucu hatası.
  /api/store-products/name/{name}:
    get:
      summary: Mağazadaki bir ürünü ana ürün adına göre getir
      description: "Giriş yapmış satıcının, ana ürün adına göre aktif (`isActive: true`) bir ürünü kendi mağazasından aramasını sağlar. Sadece **Seller** rolü gerektirir."
      tags: [StoreProducts]
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Aranan ana ürünün adı
          schema:
            type: string
            example: "Deri Spor Ayakkabı"
      responses:
        '200':
          description: Bulunan mağaza ürünü.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreProductResponse'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/store-products/seller-products:
    get:
      summary: Satıcının kendi mağazasındaki tüm ürünleri listeler
      description: "Giriş yapmış satıcının kendi mağazasındaki tüm ürünleri listeler. Sadece **Seller** rolü gerektirir."
      tags: [StoreProducts]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Mağaza ürünleri listesi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoreProductResponse'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Mağazanızda hiçbir ürün bulunmamaktadır.
        '500':
          description: Sunucu hatası.
  /api/store/orders:
    get:
      summary: Satıcının Kendi Siparişlerini Listele
      description: "Giriş yapmış satıcının, kendi ürünlerini içeren tüm siparişleri listeler. Siparişler, oluşturulma tarihine göre en yeniden en eskiye doğru sıralanır."
      tags: [Store]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Satıcının siparişleri başarıyla getirildi veya satıcının hiç ürünü yok.
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/PopulatedOrder'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Bu satıcıya ait hiçbir ürün bulunmamaktadır"
                      data:
                        type: array
                        items: {}
                        example: []
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
  /api/store/orders/id/{id}:
    get:
      summary: Satıcının Belirli Bir Ürünü İçeren Siparişlerini Listele
      description: "Giriş yapmış satıcının, ID'si belirtilen ürünü içeren tüm siparişleri listeler."
      tags: [Store]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Siparişlerde aranacak ürünün ID'si
          schema:
            type: string
      responses:
        '200':
          description: Belirtilen ürünü içeren siparişlerin listesi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopulatedOrder'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
  /api/store/orders/return-requests:
    get:
      summary: Satıcının iade taleplerini listeler
      description: "Giriş yapmış satıcının kendi ürünlerine ait tüm iade taleplerini listeler."
      tags: [Store]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: İade talepleri listesi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReturnRequest'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
  /api/store/orders/return-requests/{id}:
    put:
      summary: Satıcının iade talebini günceller
      description: "Satıcının, belirtilen iade talebinin durumunu (onaylama/reddetme) güncellemesini sağlar."
      tags: [Store]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReturnRequestInput'
      responses:
        '200':
          description: İade talebi başarıyla güncellendi.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnRequest'
        '400':
          description: Geçersiz durum.
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: İade talebi bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/store/products/sale/start-all:
    post:
      summary: Tüm ürünlere indirim uygula
      description: "Satıcının mağazasındaki tüm ürünlere belirli bir yüzde ile indirim uygular."
      tags: [Store]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleInput'
      responses:
        '200':
          description: İndirim başarıyla uygulandı.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tüm ürünlere indirim başarıyla uygulandı!"
        '400':
          description: Geçersiz indirim oranı.
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Mağazada ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/store/products/sale/stop-all:
    post:
      summary: Tüm ürünlerdeki indirimi kaldır
      description: "Satıcının mağazasındaki tüm ürünlerden indirimi kaldırır."
      tags: [Store]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: İndirimler başarıyla kaldırıldı.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "İndirimler başarıyla kaldırıldı. 5 ürün güncellendi."
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Mağazada ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/store/products/{id}/sale/start:
    put:
      summary: Ürüne indirim uygula
      description: "Satıcının, ID'si belirtilen ürününe belirli bir yüzde ile indirim başlatmasını sağlar."
      tags: [Store]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleInput'
      responses:
        '200':
          description: İndirim başarıyla başlatıldı.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ürün başarıyla indirime girdi."
                  data:
                    $ref: '#/components/schemas/StoreProductResponse'
        '400':
          description: Geçersiz indirim oranı.
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/store/products/{id}/sale/stop:
    put:
      summary: Üründeki indirimi kaldır
      description: "Satıcının, ID'si belirtilen üründeki indirimi sonlandırmasını sağlar."
      tags: [Store]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: İndirim başarıyla sonlandırıldı.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ürün indirimden çıkarıldı"
                  data:
                    $ref: '#/components/schemas/StoreProductResponse'
        '400':
          description: Ürün zaten indirimde değil.
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Ürün bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/admin/users:
    post:
      summary: Yeni kullanıcı oluştur (Admin)
      tags: [AdminUsers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInput"
      responses:
        "201":
          description: Kullanıcı oluşturuldu
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          description: Email/username zaten kayıtlı
        "401":
          description: Yetkisiz
        "403":
          description: Erişim yok (rol)
        "500":
          description: Sunucu hatası
    get:
      summary: Tüm kullanıcıları listele (Admin)
      description: "Tüm aktif (`isActive: true`) kullanıcıları listeler."
      tags: [AdminUsers]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Kullanıcı listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Yetkisiz
        "403":
          description: Erişim yok (rol)
        "404":
          description: Herhangi bir kayıtlı kullanıcı bulunamadı
        "500":
          description: Sunucu hatası
  /api/admin/me:
    put:
      summary: Admin Profilini Güncelle
      description: "Giriş yapmış olan admin kullanıcısının kendi profil bilgilerini günceller."
      tags: [AdminUsers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserInput'
      responses:
        '200':
          description: Admin profili başarıyla güncellendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
  /api/admin/users/email/{email}:
    get:
      summary: Email’e göre kullanıcı getir (Admin)
      tags: [AdminUsers]
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            example: ahmet@example.com
      responses:
        "200":
          description: Kullanıcı bulundu
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Yetkisiz
        "403":
          description: Erişim yok (rol)
        "404":
          description: Kullanıcı bulunamadı
        "500":
          description: Sunucu hatası
  /api/admin/users/sellers:
    get:
      summary: Tüm satıcıları listele (Admin)
      description: "Sistemdeki tüm aktif (`isActive: true`) satıcı (role: 'Seller') kullanıcılarını listeler."
      tags: [AdminUsers]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Satıcı kullanıcıların listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SellerUser'
        '401':
          description: Yetkisiz
        '403':
          description: Erişim yok (rol)
        '500':
          description: Sunucu hatası
  /api/admin/users/{id}:
    get:
      summary: ID’ye göre kullanıcı getir (Admin)
      tags: [AdminUsers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 66bb1c2de6b0d3b5b2d7f111
      responses:
        "200":
          description: Kullanıcı
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Yetkisiz
        "403":
          description: Erişim yok (rol)
        "404":
          description: Kullanıcı bulunamadı
        "500":
          description: Sunucu hatası
    put:
      summary: Kullanıcı güncelle (Admin)
      tags: [AdminUsers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 66bb1c2de6b0d3b5b2d7f111
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInput"
      responses:
        "200":
          description: Güncellenmiş kullanıcı
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          description: Yetkisiz
        "403":
          description: Erişim yok (rol)
        "404":
          description: Kullanıcı bulunamadı
        "500":
          description: Sunucu hatası
    delete:
      summary: Kullanıcıyı pasif hale getir (Admin)
      description: "Kullanıcıyı veritabanından silmez, bunun yerine `isActive` alanını `false` olarak günceller (soft delete)."
      tags: [AdminUsers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 66bb1c2de6b0d3b5b2d7f111
      responses:
        "200":
          description: Silme mesajı
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ahmet Yılmaz adlı kullanıcı başarıyla silinmiştir. ID: 66bb1c2de6b0d3b5b2d7f111"
        "401":
          description: Yetkisiz
        "403":
          description: Erişim yok (rol)
        "404":
          description: Kullanıcı bulunamadı
        "500":
          description: Sunucu hatası
  /api/seller-applications:
    post:
      summary: Satıcı başvurusu oluştur
      description: Giriş yapmış kullanıcının kendi adına satıcı başvurusu oluşturmasını sağlar.
      tags: [SellerApplications]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationInput'
      responses:
        '201':
          description: Başvuru başarıyla oluşturuldu.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerApplication'
        '400':
          description: Geçersiz istek (örn: Zaten mevcut bir başvuru var).
        '401':
          description: Yetkisiz.
        '500':
          description: Sunucu hatası.
  /api/admin/seller-applications/status/{status}:
    get:
      summary: Duruma göre başvuruları listele
      tags: [AdminSellerApplications]
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum: [pending, approved, rejected]
      responses:
        '200':
          description: İlgili durumdaki başvuruların listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopulatedSellerApplication'
        '401':
          description: Yetkisiz
        '403':
          description: Erişim yok (rol)
        '500':
          description: Sunucu hatası
  /api/admin/seller-applications/all:
    get:
      summary: Tüm başvuruları listele
      tags: [AdminSellerApplications]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Başvuruların tamamı
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopulatedSellerApplication'
        '401':
          description: Yetkisiz
        '403':
          description: Erişim yok (rol)
        '500':
          description: Sunucu hatası
  /api/admin/seller-applications/{id}/status:
    put:
      summary: Başvuru durumunu güncelle (approved/rejected)
      description: Onay durumuna göre kullanıcı terfi/silme işlemleri transaction ile yapılır.
      tags: [AdminSellerApplications]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Başvuru ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApplicationStatusInput'
      responses:
        '200':
          description: Güncelleme sonucu mesajı
        '400':
          description: Geçersiz status
        '401':
          description: Yetkisiz
        '403':
          description: Erişim yok (rol)
        '404':
          description: Başvuru bulunamadı
        '409':
          description: Başvuru zaten işlenmiş
        '500':
          description: Sunucu hatası
  /api/admin/seller-applications/{id}:
    delete:
      summary: Başvuruyu sil
      tags: [AdminSellerApplications]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Başvuru ObjectId
      responses:
        '200':
          description: Silme mesajı ve silinen kayıt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerApplication'
        '401':
          description: Yetkisiz
        '403':
          description: Erişim yok (rol)
        '404':
          description: Bulunamadı
        '500':
          description: Sunucu hatası
  /api/admin/orders/all:
    get:
      summary: Tüm siparişleri getir (Admin)
      description: "Sistemdeki tüm siparişleri listeler. Sadece **Admin** rolü erişebilir."
      tags: [AdminOrders]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sipariş listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopulatedOrder'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
  /api/admin/orders/id/{id}:
    get:
      summary: Kullanıcı ID'sine göre siparişleri getir (Admin)
      description: "Belirtilen kullanıcı ID'sine ait tüm siparişleri listeler. Sadece **Admin** rolü erişebilir."
      tags: [AdminOrders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sipariş listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopulatedOrder'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Kullanıcı bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/admin/orders/role/{role}:
    get:
      summary: Kullanıcı rolüne göre siparişleri getir (Admin)
      description: "Belirtilen role sahip kullanıcıların tüm siparişlerini listeler. Sadece **Admin** rolü erişebilir."
      tags: [AdminOrders]
      security:
        - bearerAuth: []
      parameters:
        - name: role
          in: path
          required: true
          schema:
            type: string
            enum: [Admin, Seller, Customer, Applicant]
      responses:
        '200':
          description: Sipariş listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopulatedOrder'
        '400':
          description: Rol parametresi zorunludur.
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
  /api/admin/orders/username/{username}:
    get:
      summary: Kullanıcı adına göre siparişleri getir (Admin)
      description: "Belirtilen kullanıcı adına sahip kullanıcının tüm siparişlerini listeler. Sadece **Admin** rolü erişebilir."
      tags: [AdminOrders]
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sipariş listesi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopulatedOrder'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '404':
          description: Kullanıcı bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/admin/orders/return-request/all:
    get:
      summary: Tüm iade taleplerini listeler (Admin)
      description: "Sistemdeki tüm iade taleplerini listeler. Durum veya satıcı ID'sine göre filtrelenebilir. Sadece **Admin** rolü erişebilir."
      tags: [AdminOrders]
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING_APPROVAL, APPROVED, REJECTED]
        - name: sellerId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: İade talepleri listesi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReturnRequest'
        '401':
          description: Yetkisiz.
        '403':
          description: Erişim yok (rol).
        '500':
          description: Sunucu hatası.
  /api/orders:
    post:
      summary: Yeni sipariş oluşturur
      description: "Kullanıcının sepetindeki ürünlerden yeni bir sipariş oluşturur. Eğer istekte `shippingAddress` belirtilmezse, kullanıcının kayıtlı adresi kullanılır. Kayıtlı adres de yoksa hata döner."
      tags: [Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: string
                  enum: [COD, CreditCard, BankTransfer]
                  example: CreditCard
                shippingAddress:
                  $ref: "#/components/schemas/ShippingAddress"
            example:
              paymentMethod: CreditCard
              shippingAddress:
                fullName: "Ahmet Yılmaz"
                phone: "+90 555 555 55 55"
                address: "Cumhuriyet Mah. No:10 Daire:5"
                city: "İstanbul"
                district: "Kadıköy"
                postalCode: "34710"
      responses:
        "201":
          description: Sipariş başarıyla oluşturuldu
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Order"
        "401":
          description: Yetkisiz
        "404":
          description: Sepet boş veya teslimat adresi bulunamadı
        "500":
          description: Sunucu hatası
  /api/orders/{id}/pay:
    put:
      summary: Sipariş ödemesini onayla
      description: "Belirtilen siparişin ödemesini onaylar. Bu işlem başarılı olduğunda, sipariş edilen ürünlerin stoğu düşürülür, sipariş 'ödenmiş' olarak işaretlenir ve kullanıcının sepeti temizlenir. Bu işlemler bir transaction içinde yapılır."
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Ödemesi onaylanacak siparişin ID'si
      responses:
        "200":
          description: Sipariş ödemesi başarıyla gerçekleşti
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Bu sipariş zaten ödenmiş
        "401":
          description: Yetkisiz
        "404":
          description: Sipariş bulunamadı
        "500":
          description: Sunucu hatası
  /api/orders/{id}:
    delete:
      summary: Siparişi iptal et (pasif yap)
      description: "Belirtilen siparişi iptal eder (`isCanceled: true` olarak işaretler). Gerçek bir silme işlemi yapmaz."
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: İptal edilecek siparişin ID'si
      responses:
        '200':
          description: Sipariş başarıyla iptal edildi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Geçersiz istek (ID belirtilmedi).
        '401':
          description: Yetkisiz.
        '404':
          description: Sipariş bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/carts:
    get:
      summary: Kullanıcının sepetini getirir
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sepet verisi veya "Sepetiniz Boş" mesajı döner
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/PopulatedCart"
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Sepetiniz Boş
        '401':
          description: Yetkisiz
        '500':
          description: Sunucu hatası
    post:
      summary: Sepete ürün ekler (varsa miktarı arttırır)
      description: "Sepete yeni bir ürün ekler veya mevcut ürünün miktarını artırır. İşlem öncesi stok kontrolü yapar."
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  example: 66b9f4b6e6b0d3b5b2d7f111
                quantity:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Güncel sepet döner (populate edilmemiş)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        '400':
          description: "Yetersiz stok."
        '401':
          description: Yetkisiz
        '404':
          description: Ürün bulunamadı
        '500':
          description: Sunucu hatası
  /api/carts/modify-quantity:
    post:
      summary: Sepetteki bir ürünün miktarını günceller
      description: "Sepetteki bir ürünün miktarını artırır veya azaltır. İşlem öncesi stok kontrolü yapar."
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  description: Miktarı değiştirilecek ürünün ID'si
                quantity:
                  type: integer
                  description: Eklenecek veya çıkarılacak miktar (örn: 1, -1)
      responses:
        '200':
          description: Ürün miktarı başarıyla güncellendi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ürün miktarı başarıyla güncellenmiştir"
                  data:
                    $ref: '#/components/schemas/Cart'
        '400':
          description: "Kullanıcının sepeti bulunmamaktadır veya yetersiz stok."
        '401':
          description: Yetkisiz.
        '404':
          description: Ürün sepette veya sistemde bulunamadı.
        '500':
          description: Sunucu hatası.
  /api/carts/items/{productId}:
    delete:
      summary: Sepetten belirli ürünü kaldırır
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: Kaldırılacak ürünün ObjectId'si
      responses:
        '200':
          description: Ürün kaldırıldı ve güncel sepet döner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveFromCartResponse'
        '401':
          description: Yetkisiz
        '404':
          description: Sepet bulunamadı
        '500':
          description: Sunucu hatası